package org.giiwa.ess.base;

import org.giiwa.core.bean.TimeStamp;
import org.giiwa.core.bean.X;

import java.io.BufferedReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.giiwa.core.bean.Helper.V;
import org.giiwa.core.bean.Helper.W;
import org.giiwa.core.bean.Helper.W.Entity;
import org.giiwa.core.conf.Config;
import org.giiwa.core.conf.Global;
import org.giiwa.core.json.JSON;
import org.giiwa.core.net.Http;
import org.giiwa.core.task.Callable2;
import org.giiwa.core.task.LiveHand;
import org.giiwa.core.task.Task;
import org.giiwa.framework.bean.Data;
import org.giiwa.framework.bean.GLog;
import org.giiwa.framework.web.Language;

public class SE {

	static Log log = LogFactory.getLog(SE.class);

	private static String server = null;
	public static SE inst = new SE();

	private static LiveHand putter;

	public static boolean isOn() {
		return Global.getInt("es.enabled", 0) == 1;
	}

	public static void init() {
		if (server == null) {
			server = Global.getString("es.url", null);
			putter = new LiveHand(-1, Config.getConf().getInt("es.putter", 2));
		}
	}

	/**
	 * count the hits
	 * 
	 * @param db
	 * @param tablename
	 * @param hits
	 * 
	 */
	public void hits(String db, String tablename, List<JSON> hits) {
		if (X.isEmpty(hits)) {
			return;
		}

		for (JSON j1 : hits) {
			String id = j1.getString("id");
			W q = W.create(X.ID, id);
			try {
				if (Data.exists(tablename, q)) {
					// refresh the data
					Data.update(tablename, q, V.create("_indexed", 0).ignore("updated"));
				} else {
					// remove
					remove(db, tablename, id);
				}
			} catch (Exception e) {
				log.error("table=" + tablename + ", id=" + id, e);
			}
		}
	}

	/**
	 * 
	 * @param db
	 * @param tablename
	 * @param cols
	 * @param q
	 * @param s
	 * @param n
	 * @param highlights
	 * @return
	 */
	public JSON search(String db, String tablename, W q, int s, int n, String[] highlights) {
		if (X.isEmpty(server)) {
			log.error("SE not init yet.");
			return null;
		}

		TimeStamp t = TimeStamp.create();

		String url = server + "/" + (X.isEmpty(db) ? X.EMPTY : (db + "_")) + tablename + "/_search";
		JSON query = JSON.create();
		query.put("query", _query(q));

		if (log.isDebugEnabled())
			log.debug("search, q=" + q + ", query=" + query);

		query.put("sort", _sort(q));
		query.put("from", s);
		query.put("size", n);

		if (highlights != null) {
			JSON hf = JSON.create();
			for (String col : highlights) {
				hf.append(col, JSON.create());
			}
			query.append("highlight", JSON.create().append("fields", hf));
		}

		if (log.isDebugEnabled())
			log.debug("SE.search, db=" + db + ", tablename=" + tablename + ", query=" + query.toString());
//		System.out.println("db=" + db + ", tablename=" + tablename + ", query=" + query.toString());

		Http h = Http.create();
		try {
			Http.Response r = h.post(url, JSON.create().append("Content-Type", "application/json"), query.toString(),
					X.AMINUTE);

			if (log.isDebugEnabled())
				log.debug("SE.search, query - cost: " + t.past() + ", db=" + db + ", tablename=" + tablename
						+ ", query=" + query + ", resp=" + r.body);

//		System.out.println("query - cost: " + t.past() + ", db=" + db + ", tablename=" + tablename + ", query=" + query
//				+ ", resp=" + r.body);

			if (r.status == 200) {
				JSON j = JSON.fromObject(r.body);
				JSON j1 = null;
				j1 = JSON.fromObject(j.get("hits")).append("cost", t.past());
				if (j1 != null && j1.containsKey("hits")) {

					List<JSON> l2 = JSON.createList();
					List<JSON> l1 = j1.getList("hits");
					for (JSON j2 : l1) {

						JSON s1 = (JSON) j2.get("_source");
						if (s1 != null && !s1.isEmpty()) {
							for (String name : s1.keySet()) {
								Object v = s1.get(name);
								v = Language.getLanguage().truncate(v, 200);
								s1.put(name, v);
							}

							JSON h1 = (JSON) j2.get("highlight");
							if (h1 != null && !h1.isEmpty()) {
								if (s1 != null) {
									for (String name : h1.keySet()) {
										s1.put(name, ((List<?>) h1.get(name)).get(0));
									}
								}
							}
							l2.add(s1);
						}
					}
					j1.append("hits", l2);
				}

				if (log.isDebugEnabled())
					log.debug("SE.search, j1=" + j1);

				return j1;
			}
		} finally {
			h.close();
		}

		return null;

	}

	private JSON _agg(String db, String tablename, String[] cols, String groupby, int n) {

		JSON a = null;
		if (cols != null && cols.length > 0) {
			for (String s : cols) {
				if (s.indexOf("(") > 0) {
					String[] ss = X.split(s, "[\\(\\)]");
					if (ss != null && ss.length == 2) {
						if (a == null) {
							a = JSON.create();
						}
						String f = ss[1];
//						if (X.isSame(f, "*")) {
//							f = "_id";
//						}
//						a.append(ss[0] + "_" + ss[1], JSON.create().append(X.isSame(ss[0], "count") ? "stats" : ss[0],
//								JSON.create().append("field", f)));
						if (X.isSame("count", ss[0])) {
							a.append(s, JSON.create().append("cardinality", JSON.create().append("field", f)));
//							a.append(s, JSON.create().append("stats", JSON.create().append("field", 1)));
						} else if (X.isIn(ss[0], "sum_of_squares", "variance", "std_deviation", "std_deviation_upper",
								"std_deviation_lower")) {
							a.append(s, JSON.create().append("extended_stats", JSON.create().append("field", f)));
						} else {
							a.append(s, JSON.create().append(ss[0], JSON.create().append("field", f)));
						}
					}
				}
			}
		}

		if (X.isEmpty(groupby)) {
			return a;
		} else {
			String[] ss = X.split(groupby, ",");
			JSON g = JSON.create();
			JSON r = g;
			for (String s : ss) {
				JSON j = JSON.create();
				g.append(s, j);
				// g.append(s + "_s", j);
				if (fielddata.contains(db + "_" + tablename + "_" + s)) {
					s = s + ".raw";
				}

				j.append("terms", JSON.create().append("field", s).append("size", n));
				j.append("aggs", JSON.create());
				// j.append(s, JSON.create().append("terms",
				// JSON.create().append("field", s)));
				g = (JSON) j.get("aggs");
			}
			if (a != null) {
				g.putAll(a);
			}
			return r;
		}

	}

	private List<JSON> _sort(W q) {

		List<JSON> sort = new ArrayList<JSON>();
		if (q != null) {
			List<Entity> l1 = q.getOrder();
			if (!X.isEmpty(l1)) {
				for (Entity e : l1) {
					Object v = e.value;
					JSON j1 = JSON.create().append(e.name.toLowerCase(),
							JSON.create().append("order", 1 == X.toInt(v) ? "asc" : "desc"));
					sort.add(j1);
				}
			}
		}

		return sort;
	}

	private JSON _query(W q) {
		if (q == null)
			return JSON.create();

		List<JSON> must = new ArrayList<JSON>();
		List<JSON> must_not = new ArrayList<JSON>();
		List<JSON> should = new ArrayList<JSON>();

		List<Entity> l1 = q.getList();
		if (!X.isEmpty(l1)) {
			for (Entity e : l1) {
				Object v = e.value;
				if (v instanceof String) {
					v = v.toString();
				}

				String[] vv = X.split(v.toString(), "[ ,;；。]");
				for (String s1 : vv) {
					JSON j1 = JSON.create();

					if (e.op == W.OP.neq) {
						if (v instanceof String) {
							j1.append("match_phrase", JSON.create().append(e.name, JSON.create().append("query", s1))
									.append("boost", e.boost));
						} else {
							j1.append("term", JSON.create().append(e.name, s1));
						}
						must_not.add(j1);
					} else {
						if (e.op == W.OP.eq || e.op == W.OP.like) {
							if (v instanceof String) {
								j1.append("match_phrase", JSON.create().append(e.name,
										JSON.create().append("query", s1).append("boost", e.boost)));
							} else {
								j1.append("term", JSON.create().append(e.name, s1));
							}
						} else if (e.op == W.OP.gt) {
							j1.append("range", JSON.create().append(e.name, JSON.create().append("gt", s1)));
						} else if (e.op == W.OP.gte) {
							j1.append("range", JSON.create().append(e.name, JSON.create().append("gte", s1)));
						} else if (e.op == W.OP.lt) {
							j1.append("range", JSON.create().append(e.name, JSON.create().append("lt", s1)));
						} else if (e.op == W.OP.lte) {
							j1.append("range", JSON.create().append(e.name, JSON.create().append("lte", s1)));
						}

						if (e.cond == W.AND) {
							must.add(j1);
						} else {
							should.add(j1);
						}
					}
				}
			}
		}

		List<W> l2 = q.getW();
		if (!X.isEmpty(l2)) {
			for (W e : l2) {
				JSON j1 = _query(e);
				if (e.getCondition() == W.AND) {
					must.add(j1);
				} else {
					should.add(j1);
				}
			}
		}

		if (must.size() == 1 && !should.isEmpty()) {
			// move to should
			should.add(0, must.remove(0));
		}

		JSON j2 = JSON.create();
		j2.append("must", must);
		j2.append("should", should);
		j2.append("must_not", must_not);
		return JSON.create().append("bool", j2);
	}

	private JSON _convertAgg(JSON agg) {
		if (agg == null || agg.isEmpty())
			return null;

		JSON jo = JSON.create();
		for (String name : agg.keySet()) {
			Object o = agg.get(name);
			if (o instanceof JSON) {
				JSON t = (JSON) o;
				if (t.containsKey("buckets")) {
					jo.put(name, _buckets(t.getList("buckets"), name));
				} else {
					if (t.containsKey("value")) {
						jo.put(name, t.get("value"));
					} else {
						jo.put(name, t.get("count"));
					}
//					for (String k : t.keySet()) {
//						if (X.isSame(k, "value")) {
//							jo.put(name, t.get(k));
//						} else {
//							jo.put(k, t.get(k));
//						}
//					}
				}
			} else {
				jo.put(name, o);
			}
		}
		// System.out.println(jo);

		List<JSON> l1 = new ArrayList<JSON>();
		l1.add(jo);
		return JSON.create().append("stats", _expand(l1));
	}

	private List<JSON> _expand(List<JSON> l1) {
		for (int i = 0; i < l1.size(); i++) {
			JSON j1 = l1.get(i);
			for (String name : j1.keySet()) {
				Object o = j1.get(name);
				if (o instanceof List) {
					// remove it and expand
					List<JSON> l2 = _expand(j1, name);
					if (l2 != null && !l2.isEmpty()) {
						l1.addAll(l2);
						l1.remove(i);
						i--;
						break;
					}
				}
			}
		}
		return l1;
	}

	private List<JSON> _buckets(Collection<JSON> l1, String n0) {
		if (l1 == null || l1.isEmpty())
			return null;

		List<JSON> l2 = new ArrayList<JSON>(l1.size());
		for (JSON j1 : l1) {
			JSON j2 = JSON.create();
			j2.put(n0, j1.get("key"));
//			j2.put("count", j1.get("doc_count"));
			for (String name : j1.keySet()) {
				Object o = j1.get(name);
				if (o instanceof JSON) {
					JSON t = (JSON) o;
					if (t.containsKey("buckets")) {
						j2.put(name, _buckets(t.getList("buckets"), name));
					} else {
						if (t.containsKey("value")) {
							j2.put(name, t.get("value"));
						} else {
							String func = X.split(name, "[(]")[0];
							if (X.isSame(func, "std_deviation_upper")) {
								j2.put(name, ((JSON) t.get("std_deviation_bounds")).get("upper"));
							} else if (X.isSame(func, "std_deviation_lower")) {
								j2.put(name, ((JSON) t.get("std_deviation_bounds")).get("lower"));
							} else {
								j2.put(name, t.get(func));
							}
						}
//						for (String s1 : t.keySet()) {
//							if (X.isSame(s1, "value")) {
//								j2.put(name, t.get(s1));
//							} else {
//								j2.put(s1, t.get(s1));
//							}
//						}
					}
				}
			}
			l2.add(j2);
		}

		return l2;
	}

	@SuppressWarnings("unchecked")
	private List<JSON> _expand(JSON j1, String name) {
		// System.out.println(j1);

		Object o = j1.get(name);
		if (o instanceof List) {
			// expand
			List<JSON> l2 = (List<JSON>) o;

			List<JSON> l1 = new ArrayList<JSON>(l2.size());
			for (JSON j2 : l2) {
				JSON j3 = JSON.create(j1);
				j3.remove(name);
				for (String s2 : j2.keySet()) {
					Object o2 = j2.get(s2);
					if (o2 instanceof List) {
						j3.put(s2, o2);
					} else {
						j3.put(s2, o2);
					}
				}
				l1.add(j3);
			}
			return l1;
		} else {
			return Arrays.asList(j1);
		}
	}

	public int put(String db, String tablename, JSON doc, Callable2<String, String> cb) {

		if (X.isEmpty(server)) {
			log.error("SE not init yet.");
			return 0;
		}

		try {
			putter.hold();
			Task.schedule(() -> {

				String id = doc.getString(X.ID);

				Http h = Http.create();
				try {
					Http.Response r = h.put(
							server + "/" + (X.isEmpty(db) ? X.EMPTY : (db + "_")) + tablename + "/_doc/" + id,
							JSON.create().append("Content-Type", "application/json"), doc.toString(), X.AMINUTE);

					if (r.status == 200 || r.status == 201) {
						if (cb != null) {
							JSON j1 = JSON.fromObject(r.body);
							cb.call(j1.getString("result"), id);
						}
					} else {
						log.error("SE.put, status=" + r.status + ", " + r.body);
						if (cb != null) {
							cb.call(r.body, id);
						}
					}
				} finally {
					putter.drop();
					h.close();
				}

			});

		} catch (Exception e) {
			log.error(e.getMessage(), e);

			GLog.applog.error("se", "put", doc.toString(), e, null, null);
		}

		return 0;

	}

	/**
	 * 
	 * @param db
	 * @param tablename
	 * @param q
	 * @return
	 */
	public List<String> remove(String db, String tablename, W q) {

		if (X.isEmpty(server)) {
			log.error("SE not init yet.");
			return null;
		}

		List<String> ids = new ArrayList<String>();
		TimeStamp t = TimeStamp.create();

		JSON jo = search(db, tablename, q, 0, 100, null);
		while (jo != null && jo.getLong("total", 0) > 0) {

			Collection<JSON> list = jo.getList("list");
			if (list == null || list.isEmpty()) {
				break;
			}
			for (JSON j : list) {
				String id = j.getString(X.ID);
				ids.add(id);
				remove(db, tablename, id);
			}
			jo = search(db, tablename, q, 0, 100, null);

		}

		if (log.isInfoEnabled())
			log.info("delete - cost: " + t.pastms() + "ms, tablename=" + tablename + ", q=" + q);

		return ids;
	}

	public boolean remove(String name) {

		Http.Response r = Http.owner.delete(server + "/" + name, JSON.create());

		if (log.isWarnEnabled())
			log.warn("SE.remove, name=" + name + ", resp=" + r.body);

		return true;

	}

	public boolean remove(String db, String tablename) {

		return remove((X.isEmpty(db) ? X.EMPTY : (db + "_")) + tablename);

	}

	public boolean remove(String db, String tablename, String id) {
		Http.Response r = Http.owner
				.delete(server + "/" + (X.isEmpty(db) ? X.EMPTY : (db + "_")) + tablename + "/" + id, JSON.create());

		if (log.isWarnEnabled())
			log.warn("SE.remove, table=" + tablename + ", id=" + id + ", resp=" + r.body);

		return true;
	}

	public List<JSON> indices() {

		if (X.isEmpty(server)) {
			log.error("SE not init yet.");
			return null;
		}

		String url = server + "/_cat/indices/";

		if (log.isDebugEnabled())
			log.debug("SE.indices, url=" + url);

		Http h = Http.create();
		try {
			Http.Response r = h.get(url);

			if (log.isDebugEnabled())
				log.debug("SE.indices, body=" + r.body);

//		System.out.println(r.status);
			System.out.println(r.body);

			if (r.status == 200) {

				List<JSON> l1 = JSON.createList();
				BufferedReader re = new BufferedReader(new StringReader(r.body));
				try {
					String line = re.readLine();
					while (line != null) {
						String[] ss = X.split(line, "[ ]");
						JSON j1 = JSON.create();
						j1.append("health", ss[0]);
						j1.append("status", ss[1]);
						j1.append("index", ss[2]);
						j1.append("uuid", ss[3]);
						j1.append("pri", X.toInt(ss[4]));
						j1.append("rep", X.toInt(ss[5]));
						j1.append("count", X.toLong(ss[6]));
						j1.append("deleted", X.toLong(ss[7]));
						j1.append("size", ss[8]);
						j1.append("psize", ss[9]);

						l1.add(j1);
						line = re.readLine();
					}
				} catch (Exception e) {
					log.error(e.getMessage(), e);
				} finally {
					X.close(re);
				}
				return l1;
			}

			return null;
		} finally {
			h.close();
		}

	}

	public JSON stat(String db, String tablename, String[] cols, W q, int n) {

		if (X.isEmpty(server)) {
			log.error("SE not init yet.");
			return null;
		}

		String url = server + "/" + (X.isEmpty(db) ? X.EMPTY : (db + "_")) + tablename + "/_search";
		JSON query = JSON.create();
		query.put("query", _query(q));

		JSON agg = _agg(db, tablename, cols, q == null ? null : q.groupby(), n);
		if (agg != null && !agg.isEmpty()) {
			query.put("aggs", agg);
			query.put("size", 0);
		}

		if (log.isDebugEnabled())
			log.debug("SE.stat, db=" + db + ", tablename=" + tablename + ", query=" + query);
//		System.out.println("db=" + db + ", tablename=" + tablename + ", query=" + query);

		TimeStamp t = TimeStamp.create();
		Http h = Http.create();
		try {
			Http.Response r = h.post(url, JSON.create().append("Content-Type", "application/json"), query.toString(),
					X.AMINUTE);

//		System.out.println(r.status);
//			System.out.println(r.body);
			if (log.isDebugEnabled())
				log.debug("SE.stat, query - cost: " + t.pastms() + "ms, db=" + db + ", tablename=" + tablename
						+ ", query=" + query + ", resp=" + r.body);

			if (r.status == 200) {
				JSON j = JSON.fromObject(r.body);
				if (agg == null || agg.isEmpty()) {
					return (JSON) j.get("hits");
				} else {
					return _convertAgg((JSON) j.get("aggregations"));
				}
			}

			return null;
		} finally {
			h.close();
		}
	}

	static Set<String> fielddata = new HashSet<String>();

	public void fielddata(String db, String tablename, String col) {
		if (X.isEmpty(server)) {
			log.error("SE not init yet.");
			return;
		}

		fielddata.add(db + "_" + tablename + "_" + col);

		String url = server + "/" + (X.isEmpty(db) ? X.EMPTY : (db + "_")) + tablename + "/_mapping";

		JSON m = JSON.create();
		m.append("properties", JSON.create().append(col, JSON.create().append("type", "text").append("fielddata", true)
				.append("fields", JSON.create().append("raw", JSON.create().append("type", "keyword")))));

		Http.Response r = Http.owner.post(url, JSON.create().append("Content-Type", "application/json"), m.toString(),
				X.AMINUTE);

		if (log.isDebugEnabled())
			log.debug("SE.fielddata, field=" + col + ", status=" + r.status + ", body=" + r.body);

	}

	public void mapping(String db, String tablename, JSON a) {
		if (X.isEmpty(server)) {
			log.error("SE not init yet.");
			return;
		}

		String url = server + "/" + (X.isEmpty(db) ? X.EMPTY : (db + "_")) + tablename + "/_mapping";

		Http.Response r = Http.owner.post(url, JSON.create().append("Content-Type", "application/json"), a.toString(),
				X.AMINUTE);

		if (log.isDebugEnabled())
			log.debug("status=" + r.status + ", body=" + r.body);

	}

	public void define(String db, String tablename, JSON a) {
		if (X.isEmpty(server)) {
			log.error("SE not init yet.");
			return;
		}

		if (!a.containsKey("name")) {
			log.error("name missed in analizer.");
			return;
		}
		if (!a.containsKey("tokenizer")) {
			log.error("tokenizer missed in analizer.");
			return;
		}

		String name = a.getString("name");

		// remove index first

		JSON config = JSON.create().append("settings",
				JSON.create().append("analysis", JSON.create()
						.append("analyzer",
								JSON.create().append(name, JSON.create().append("tokenizer", name + "_tokenizer")))
						.append("tokenizer", JSON.create().append(name + "_tokenizer", a.get("tokenizer")))));

		String url = server + "/" + (X.isEmpty(db) ? X.EMPTY : (db + "_")) + tablename;

		Http.Response r = Http.owner.put(url, config);

		log.debug("SE.define, status=" + r.status + ", body=" + r.body);
	}

	public void analyze(String db, String tablename, JSON jo) {
		if (X.isEmpty(server)) {
			log.error("SE not init yet.");
			return;
		}

		String url = server + "/" + (X.isEmpty(db) ? X.EMPTY : (db + "_")) + tablename + "/_analyze";

		Http.Response r = Http.owner.post(url, jo);

		System.out.println(r.status);
		System.out.println(r.body);
	}

	@SuppressWarnings("static-access")
	public static void main(String[] args) {

		SE.inst.server = "http://d01:9200";

		W q = W.create();
		q.groupby("year");
//		q.and("d210", "王");

		JSON j1 = SE.inst.stat("dput", "cip_info", new String[] { "count(cip_bookprice)" }, q, 100);
		System.out.println(j1);

		System.out.println(SE.inst.indices());

	}

}
