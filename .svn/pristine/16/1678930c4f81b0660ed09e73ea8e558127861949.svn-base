package org.giiwa.sees.base;

import org.giiwa.core.bean.TimeStamp;
import org.giiwa.core.bean.X;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.giiwa.core.bean.Helper.W;
import org.giiwa.core.bean.Helper.W.Entity;
import org.giiwa.core.conf.Global;
import org.giiwa.core.json.JSON;
import org.giiwa.core.task.Callable;
import org.giiwa.core.task.LiveHand;
import org.giiwa.core.task.Task;
import org.giiwa.sees.task.IndexerTask;

public class SE {

	static Log log = LogFactory.getLog(SE.class);

	private static String server = null;
	public static SE inst = new SE();

	private static LiveHand putter;

	public static void init() {
		if (server == null) {
			server = Global.getString("es.url", null);
			putter = new LiveHand(-1, 10);
		}
	}

	public static JSON search(String tablename, String[] cols, W q, int s, int n, String[] highlights) {
		if (X.isEmpty(server)) {
			log.error("SE not init yet.");
			return null;
		}

		String url = (server.startsWith("http://") ? X.EMPTY : "http://") + server + "/" + IndexerTask.DB + "/"
				+ tablename + "/_search";
		JSON query = JSON.create();
		query.put("query", _filter(q));

		if (highlights != null) {
			JSON hf = JSON.create();
			for (String col : highlights) {
				hf.append(col, JSON.create());
			}
			query.append("highlight", JSON.create().append("fields", hf));
		}

		query.put("sort", _sort(q));
		JSON agg = _agg(cols, q == null ? null : q.groupby(), n);
		if (agg != null && !agg.isEmpty()) {
			query.put("aggs", agg);
			query.put("size", 0);
			query.put("from", 0);
		} else {
			query.put("from", s);
			query.put("size", n);
		}

		log.debug("db=" + IndexerTask.DB + ", tablename=" + tablename + ", query=" + query);

		TimeStamp t = TimeStamp.create();
		Http.Response r = Http.owner.post(url, query);

		// System.out.println(r.status);
		// System.out.println(r.body);
		log.info("query - cost: " + t.pastms() + "ms, db=" + IndexerTask.DB + ", tablename=" + tablename + ", query="
				+ query + ", resp=" + r.body);

		if (r.status == 200) {
			JSON j = JSON.fromObject(r.body);
			if (agg == null || agg.isEmpty()) {
				return (JSON) j.get("hits");
			} else {
				return _convertAgg((JSON) j.get("aggregations"));
			}
		}

		return null;

	}

	private static JSON _agg(String[] cols, String groupby, int n) {

		JSON a = null;
		if (cols != null && cols.length > 0) {
			for (String s : cols) {
				if (s.indexOf("(") > 0) {
					String[] ss = X.split(s, "[\\(\\)]");
					if (ss != null && ss.length == 2) {
						if (a == null) {
							a = JSON.create();
						}
						String f = ss[1];
						if (X.isSame(f, "*")) {
							f = "_id";
						}
						a.append(ss[0] + "_" + ss[1], JSON.create().append(ss[0], JSON.create().append("field", f)));
					}
				}
			}
		}

		if (X.isEmpty(groupby)) {
			return a;
		} else {
			String[] ss = X.split(groupby, ",");
			JSON g = JSON.create();
			JSON r = g;
			for (String s : ss) {
				JSON j = JSON.create();
				g.append(s, j);
				// g.append(s + "_s", j);
				j.append("terms", JSON.create().append("field", s).append("size", n));
				j.append("aggs", JSON.create());
				// j.append(s, JSON.create().append("terms",
				// JSON.create().append("field", s)));
				g = (JSON) j.get("aggs");
			}
			if (a != null) {
				g.putAll(a);
			}
			return r;
		}

	}

	private static List<JSON> _sort(W q) {

		List<JSON> sort = new ArrayList<JSON>();
		if (q != null) {
			List<Entity> l1 = q.getOrder();
			if (!X.isEmpty(l1)) {
				for (Entity e : l1) {
					Object v = e.value;
					JSON j1 = JSON.create().append(e.name.toLowerCase(),
							JSON.create().append("order", 1 == X.toInt(v) ? "asc" : "desc"));
					sort.add(j1);
				}
			}
		}

		return sort;
	}

	private static JSON _filter(W q) {
		JSON f = _query(q);
		return JSON.create().append("bool", JSON.create().append("filter", f));
	}

	private static JSON _query(W q) {
		if (q == null)
			return JSON.create();

		List<JSON> must = new ArrayList<JSON>();
		List<JSON> must_not = new ArrayList<JSON>();
		List<JSON> should = new ArrayList<JSON>();

		List<Entity> l1 = q.getList();
		if (!X.isEmpty(l1)) {
			for (Entity e : l1) {
				Object v = e.value;
				if (v instanceof String) {
					v = v.toString().toLowerCase();
				}

				JSON j1 = JSON.create();

				if (e.op == W.OP.neq) {
					if (v instanceof String) {
						j1.append("match_phrase",
								JSON.create().append(e.name.toLowerCase(), JSON.create().append("query", v)));
					} else {
						j1.append("term", JSON.create().append(e.name.toLowerCase(), v));
					}
					must_not.add(j1);
				} else {
					if (e.op == W.OP.eq || e.op == W.OP.like) {
						if (v instanceof String) {
							j1.append("match_phrase",
									JSON.create().append(e.name.toLowerCase(), JSON.create().append("query", v)));
						} else {
							j1.append("term", JSON.create().append(e.name.toLowerCase(), v));
						}
					} else if (e.op == W.OP.gt) {
						j1.append("range", JSON.create().append(e.name.toLowerCase(), JSON.create().append("gt", v)));
					} else if (e.op == W.OP.gte) {
						j1.append("range", JSON.create().append(e.name.toLowerCase(), JSON.create().append("gte", v)));
					} else if (e.op == W.OP.lt) {
						j1.append("range", JSON.create().append(e.name.toLowerCase(), JSON.create().append("lt", v)));
					} else if (e.op == W.OP.lte) {
						j1.append("range", JSON.create().append(e.name.toLowerCase(), JSON.create().append("lte", v)));
					}

					if (e.cond == W.AND) {
						must.add(j1);
					} else {
						should.add(j1);
					}
				}
			}
		}

		List<W> l2 = q.getW();
		if (!X.isEmpty(l2)) {
			for (W e : l2) {
				JSON j1 = _query(e);
				if (e.getCondition() == W.AND) {
					must.add(j1);
				} else {
					should.add(j1);
				}
			}
		}

		if (must.size() == 1 && !should.isEmpty()) {
			// move to should
			should.add(0, must.remove(0));
		}

		JSON j2 = JSON.create();
		j2.append("must", must);
		j2.append("should", should);
		j2.append("must_not", must_not);
		return JSON.create().append("bool", j2);
	}

	private static JSON _convertAgg(JSON agg) {
		if (agg == null || agg.isEmpty())
			return null;

		JSON jo = JSON.create();
		for (String name : agg.keySet()) {
			Object o = agg.get(name);
			if (o instanceof JSON) {
				JSON t = (JSON) o;
				if (t.containsKey("buckets")) {
					jo.put(name, _buckets(t.getList("buckets"), name));
				} else {
					for (String k : t.keySet()) {
						if (X.isSame(k, "value")) {
							jo.put(X.split(name, "_")[0], t.get(k));
						} else {
							jo.put(k, t.get(k));
						}
					}
				}
			} else {
				jo.put(name, o);
			}
		}
		// System.out.println(jo);

		List<JSON> l1 = new ArrayList<JSON>();
		l1.add(jo);
		return JSON.create().append("stats", _expand(l1));
	}

	private static List<JSON> _expand(List<JSON> l1) {
		for (int i = 0; i < l1.size(); i++) {
			JSON j1 = l1.get(i);
			for (String name : j1.keySet()) {
				Object o = j1.get(name);
				if (o instanceof List) {
					// remove it and expand
					List<JSON> l2 = _expand(j1, name);
					if (l2 != null && !l2.isEmpty()) {
						l1.addAll(l2);
						l1.remove(i);
						i--;
						break;
					}
				}
			}
		}
		return l1;
	}

	private static List<JSON> _buckets(Collection<JSON> l1, String n0) {
		if (l1 == null || l1.isEmpty())
			return null;

		List<JSON> l2 = new ArrayList<JSON>(l1.size());
		for (JSON j1 : l1) {
			JSON j2 = JSON.create();
			j2.put(n0, j1.get("key"));
			j2.put("count", j1.get("doc_count"));
			for (String name : j1.keySet()) {
				Object o = j1.get(name);
				if (o instanceof JSON) {
					JSON t = (JSON) o;
					if (t.containsKey("buckets")) {
						j2.put(name, _buckets(t.getList("buckets"), name));
					} else {
						for (String s1 : t.keySet()) {
							if (X.isSame(s1, "value")) {
								j2.put(X.split(name, "_")[0], t.get(s1));
							} else {
								j2.put(s1, t.get(s1));
							}
						}
					}
				}
			}
			l2.add(j2);
		}

		return l2;
	}

	private static List<JSON> _expand(JSON j1, String name) {
		// System.out.println(j1);

		Object o = j1.get(name);
		if (o instanceof List) {
			// expand
			List<JSON> l2 = (List<JSON>) o;

			List<JSON> l1 = new ArrayList<JSON>(l2.size());
			for (JSON j2 : l2) {
				JSON j3 = JSON.create(j1);
				j3.remove(name);
				for (String s2 : j2.keySet()) {
					Object o2 = j2.get(s2);
					if (o2 instanceof List) {
						j3.put(s2, o2);
					} else {
						j3.put(s2, o2);
					}
				}
				l1.add(j3);
			}
			return l1;
		} else {
			return Arrays.asList(j1);
		}
	}

	public static int put(String db, String tablename, JSON doc, Callable<String> cb) {
		if (X.isEmpty(server)) {
			log.error("SE not init yet.");
			return 0;
		}

		try {
			putter.hold();
			Task.create(new Runnable() {

				@Override
				public void run() {
					String id = doc.getString(X.ID);

					try {
						Http.Response r = Http.owner.put((server.startsWith("http://") ? X.EMPTY : "http://") + server
								+ "/" + db + "/" + tablename + "/" + id, doc);

						if (r.status == 200 || r.status == 201) {
							cb.call(200, id);
						} else {
							log.error("status=" + r.status + ", " + r.body);
						}
					} finally {
						putter.drop();
					}
				}

			}).schedule(0);
		} catch (Exception e) {
			log.error(e.getMessage(), e);
		}
		return 0;

	}

	public static List<String> remove(String db, String tablename, W q) {
		if (X.isEmpty(server)) {
			log.error("SE not init yet.");
			return null;
		}

		List<String> ids = new ArrayList<String>();
		TimeStamp t = TimeStamp.create();
		JSON jo = search(tablename, new String[] { X.ID }, q, 0, 100, null);
		while (jo != null && jo.getLong("total", 0) > 0) {
			Collection<JSON> list = jo.getList("list");
			if (list == null || list.isEmpty()) {
				break;
			}
			for (JSON j : list) {
				String id = j.getString(X.ID);
				ids.add(id);
				Http.Response r = Http.owner.delete((server.startsWith("http://") ? X.EMPTY : "http://") + server + "/"
						+ db + "/" + tablename + "/" + id, JSON.create());
			}
			jo = search(tablename, new String[] { X.ID }, q, 0, 100, null);

		}
		log.info("delete - cost: " + t.pastms() + "ms, tablename=" + tablename + ", q=" + q);

		return ids;
	}

	public static JSON stat(String db, String tablename, String[] cols, W q, int n) {

		if (X.isEmpty(server)) {
			log.error("SE not init yet.");
			return null;
		}

		String url = (server.startsWith("http://") ? X.EMPTY : "http://") + server + "/" + db + "/" + tablename
				+ "/_search";
		JSON query = JSON.create();
		query.put("query", _filter(q));

		JSON agg = _agg(cols, q == null ? null : q.groupby(), n);
		if (agg != null && !agg.isEmpty()) {
			query.put("aggs", agg);
			query.put("size", 0);
		}

		log.debug("db=" + db + ", tablename=" + tablename + ", query=" + query);
		System.out.println("db=" + db + ", tablename=" + tablename + ", query=" + query);

		TimeStamp t = TimeStamp.create();
		Http.Response r = Http.owner.post(url, query);

		System.out.println(r.status);
		System.out.println(r.body);
		log.info("query - cost: " + t.pastms() + "ms, db=" + db + ", tablename=" + tablename + ", query=" + query
				+ ", resp=" + r.body);

		if (r.status == 200) {
			JSON j = JSON.fromObject(r.body);
			if (agg == null || agg.isEmpty()) {
				return (JSON) j.get("hits");
			} else {
				return _convertAgg((JSON) j.get("aggregations"));
			}
		}

		return null;

	}

	public static void fielddata(String db, String tablename, String col, boolean enabled) {
		if (X.isEmpty(server)) {
			log.error("SE not init yet.");
			return;
		}

		String url = (server.startsWith("http://") ? X.EMPTY : "http://") + server + "/" + db + "/" + tablename
				+ "/_mapping";

		JSON m = JSON.create();
		m.append("properties",
				JSON.create().append(col, JSON.create().append("type", "text").append("fielddata", enabled)));
		Http.Response r = Http.owner.put(url, m);

		System.out.println(r.status);
		System.out.println(r.body);

	}

	public static void cleanup(String name, W q, int s) {
		IndexerTask.cleanup(name, q, s);
	}

}
